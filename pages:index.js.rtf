{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AppleColorEmoji;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ useEffect, useMemo, useState \} from "react";\
import WalletConnect from "@/components/WalletConnect";\
import \{ BrowserProvider, Contract, formatUnits, parseUnits \} from "ethers";\
import \{ ABI, TOKEN_ADDRESS, TOKEN_SYMBOL, CHAIN_ID, HAS_PHP_RATE \} from "@/lib/contract";\
\
export default function Home() \{\
  const [provider, setProvider] = useState/** @type \{BrowserProvider|null\} */(null);\
  const [address, setAddress] = useState(null);\
  const [decimals, setDecimals] = useState(18);\
  const [balance, setBalance] = useState("0");\
  const [phpRate, setPhpRate] = useState(null); // number (PHP per OMX)\
  const [amount, setAmount] = useState("");\
  const [to, setTo] = useState("");\
  const [preview, setPreview] = useState(null);\
  const [busy, setBusy] = useState(false);\
  const [msg, setMsg] = useState("");\
\
  const contract = useMemo(() => \{\
    if (!provider) return null;\
    return new Contract(TOKEN_ADDRESS, ABI, provider);\
  \}, [provider]);\
\
  const refresh = async (addr) => \{\
    if (!contract || !addr) return;\
    try \{\
      const [d, bal] = await Promise.all([\
        contract.decimals(),\
        contract.balanceOf(addr)\
      ]);\
      setDecimals(Number(d));\
      setBalance(formatUnits(bal, Number(d)));\
\
      if (HAS_PHP_RATE) \{\
        try \{\
          const r = await contract.phpRate();\
          // phpRate is 1e18 scaled, e.g. 200 * 1e18\
          const rateNum = Number(formatUnits(r, 18));\
          setPhpRate(rateNum);\
        \} catch \{\
          setPhpRate(null);\
        \}\
      \}\
    \} catch (e) \{\
      console.error(e);\
    \}\
  \};\
\
  const onWalletReady = async (p, addr) => \{\
    setProvider(p);\
    setAddress(addr);\
    await refresh(addr);\
  \};\
\
  const doPreview = async () => \{\
    setMsg("");\
    setPreview(null);\
    if (!contract || !address) return;\
    if (!amount || Number(amount) <= 0) \{ setMsg("Enter amount."); return; \}\
    try \{\
      const raw = parseUnits(amount, decimals);\
      const res = await contract.previewWithdraw(address, raw);\
      const parsed = \{\
        net: Number(formatUnits(res[0], decimals)),\
        fee: Number(formatUnits(res[1], decimals)),\
        allowed: Number(formatUnits(res[2], decimals)),\
        excess: Number(formatUnits(res[3], decimals)),\
        firstYear: Boolean(res[4])\
      \};\
      setPreview(parsed);\
    \} catch (e) \{\
      console.error(e);\
      setMsg("Preview failed. Make sure trading is enabled and you\'92re on Polygon.");\
    \}\
  \};\
\
  const doWithdraw = async () => \{\
    setMsg("");\
    if (!provider || !contract || !address) return;\
    if (!to) \{ setMsg("Enter a recipient address."); return; \}\
    if (!amount || Number(amount) <= 0) \{ setMsg("Enter amount."); return; \}\
    try \{\
      setBusy(true);\
      const signer = await provider.getSigner();\
      const signed = contract.connect(signer);\
      const tx = await signed.transfer(to, parseUnits(String(amount), decimals));\
      setMsg("Submitting transaction\'85");\
      await tx.wait();\
      setMsg("
\f1 \uc0\u9989 
\f0  Withdrawal sent.");\
      await refresh(address);\
      setPreview(null);\
      setAmount("");\
    \} catch (e) \{\
      console.error(e);\
      setMsg("Transaction failed or rejected.");\
    \} finally \{\
      setBusy(false);\
    \}\
  \};\
\
  const phpFor = (omx) => (phpRate ? (omx * phpRate).toFixed(2) : null);\
\
  return (\
    <div className="container">\
      <div className="card">\
        <div className="h1">OMX Withdrawal</div>\
        <div className="sub">Polygon Mainnet \'95 White/Grey/Blue UI</div>\
\
        <WalletConnect onReady=\{onWalletReady\} />\
\
        <div className="row">\
          <div className="card" style=\{\{flex:1, minWidth:260\}\}>\
            <div className="sub">Your \{TOKEN_SYMBOL\} Balance</div>\
            <div style=\{\{fontSize:28, fontWeight:700\}\}>\
              \{Number(balance).toLocaleString(undefined, \{maximumFractionDigits:4\})\} \{TOKEN_SYMBOL\}\
            </div>\
            \{phpRate && (\
              <div className="sub" style=\{\{marginTop:6\}\}>\
                Approx. value: <b>\uc0\u8369 \{phpFor(Number(balance))\}</b> (\u8369 \{phpRate\} / \{TOKEN_SYMBOL\})\
              </div>\
            )\}\
          </div>\
\
          <div className="card" style=\{\{flex:2, minWidth:300\}\}>\
            <div className="sub" style=\{\{marginBottom:8\}\}>Withdrawal (Transfer)</div>\
            <div className="stack">\
              <input\
                className="input"\
                placeholder=\{`Amount ($\{TOKEN_SYMBOL\})`\}\
                type="number"\
                min="0"\
                step="0.0001"\
                value=\{amount\}\
                onChange=\{(e)=>setAmount(e.target.value)\}\
              />\
              <input\
                className="input"\
                placeholder="Recipient address (0x\'85)"\
                value=\{to\}\
                onChange=\{(e)=>setTo(e.target.value)\}\
              />\
              <div className="row">\
                <button className="btn secondary" onClick=\{doPreview\} disabled=\{!address || busy\}>Preview</button>\
                <button className="btn" onClick=\{doWithdraw\} disabled=\{!address || busy\}>Withdraw</button>\
              </div>\
\
              \{msg && <div className="notice">\{msg\}</div>\}\
\
              \{preview && (\
                <div className="card" style=\{\{padding:12\}\}>\
                  <div style=\{\{fontWeight:700, marginBottom:6\}\}>Preview Result</div>\
                  <table className="table">\
                    <tbody>\
                      <tr><th>Net You Receive</th><td>\
                        \{preview.net.toLocaleString(undefined,\{maximumFractionDigits:4\})\} \{TOKEN_SYMBOL\}\
                        \{phpRate && <> &nbsp;(<b>\uc0\u8369 \{phpFor(preview.net)\}</b>)</>\}\
                      </td></tr>\
                      <tr><th>Fee (Lost)</th><td>\
                        \{preview.fee.toLocaleString(undefined,\{maximumFractionDigits:4\})\} \{TOKEN_SYMBOL\}\
                        \{phpRate && <> &nbsp;(\uc0\u8369 \{phpFor(preview.fee)\})</>\}\
                      </td></tr>\
                      <tr><th>Allowed Portion</th><td>\{preview.allowed.toLocaleString(undefined,\{maximumFractionDigits:4\})\} \{TOKEN_SYMBOL\}</td></tr>\
                      <tr><th>Excess Portion</th><td>\{preview.excess.toLocaleString(undefined,\{maximumFractionDigits:4\})\} \{TOKEN_SYMBOL\}</td></tr>\
                      <tr><th>Status</th><td>\
                        \{preview.firstYear\
                          ? <span className="badge red">Within first year (30% penalty applies)</span>\
                          : <span className="badge green">After first year (10% monthly allowance rule)</span>\}\
                      </td></tr>\
                    </tbody>\
                  </table>\
                </div>\
              )\}\
\
              <div className="sub" style=\{\{marginTop:6\}\}>\
                \'95 Within the first year, any withdrawal applies a <b>30% penalty</b> automatically.<br/>\
                \'95 After 1 year, up to <b>10% of balance per 30 days</b> is free; excess incurs 30% on excess only.<br/>\
                \'95 Penalty goes to treasury (hidden from dashboard except at preview).\
              </div>\
            </div>\
          </div>\
        </div>\
\
      </div>\
    </div>\
  );\
\}\
}